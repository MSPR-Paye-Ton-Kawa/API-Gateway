name: .NET Core CI

on:
  push:
    branches:
      - main
      - dev
      - 'feature-*'
      - 'release-*'
      - 'hotfix-*'
      - 'bugfix-*'
  pull_request:
    branches:
      - main
      - dev
      - 'feature-*'
      - 'release-*'
      - 'hotfix-*'
      - 'bugfix-*' 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x' 

      - name: Build and Test Docker image
        run: |
          docker build -t api_gateway:latest .
          
        # Ã‰tape pour OWASP Dependency-Check
      - name: Run OWASP Dependency-Check
        run: docker run --rm -v $(pwd):/src -e NVD_API_KEY=4fc852eb-bfe8-4fb1-af13-76eb2a2967e1 owasp/dependency-check --scan /src --format ALL
      
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Publish Docker image
        if: success() # Only publish if the build and test steps are successful
        run: |
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker tag api_gateway "${{ secrets.DOCKERHUB_USERNAME }}/api_gateway:latest"
            docker push "${{ secrets.DOCKERHUB_USERNAME }}/api_gateway:latest"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey="MSPR-Paye-Ton-Kawa_API-Gateway"
            -Dsonar.organization="mspr-paye-ton-kawa"
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources="./API_Gateway"

      - name: Deploy to staging
        if: github.ref == 'refs/heads/release' && github.event_name == 'push'
        run: |
          echo "Deploying Docker image to staging environment:"
          docker pull "${{ secrets.DOCKERHUB_USERNAME }}/api_gateway:latest"
          docker stop staging-container || true
          docker rm staging-container || true
          docker run -d --name staging-container -p 8081:80 "${{ secrets.DOCKERHUB_USERNAME }}/api_gateway:latest"
          echo "Application deployed to http://localhost:5000"

      - name: Deploy to production
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          docker pull "${{ secrets.DOCKERHUB_USERNAME }}/api_gateway:latest"
          docker stop production-container || true
          docker rm production-container || true
          docker run -d --name production-container -p 8080:80 "${{ secrets.DOCKERHUB_USERNAME }}/api_gateway:latest"
          echo "Application deployed to http://localhost:5000"
